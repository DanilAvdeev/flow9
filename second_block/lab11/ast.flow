import lingo/pegcode/driver;
import math/math;
import string;
import sys/system;

Expr ::= Int, Mul, Add, Sub, Div, Pow, Neg, Var;
Int	(num : double);
Mul	(left : Expr, right : Expr);
Add (left : Expr, right : Expr);
Sub	(left : Expr, right : Expr);
Div	(left : Expr, right : Expr);
Pow	(left : Expr, right : Expr);
Neg (exp: Expr);
Var	(var : string);

Str(exp: Expr)->string{
    switch(exp){
        Add (l, r) : "(" + Str(l) + "+" + Str(r) + ")";
        Sub (l, r) : "(" + Str(l) + "-" + Str(r) + ")";
        Mul	(l, r) : "(" + Str(l) + "*" + Str(r) + ")";
        Div	(l, r) : "(" + Str(l) + "/" + Str(r) + ")";
		Pow	(l, r) : "(" + Str(l) + "^" + Str(r) + ")";
        Neg	(v)    : "(-"+ Str(v) + ")";
        Int	(num)  : d2s(num);
        Var	(v)    : v;
    }
}

Val(exp : Expr, variables : Tree<string, double>) -> Maybe<double>{

    apply_op = \l, r, op -> {
        switch(Val(l, variables)) {
            Some(left) :  switch(Val(r, variables)){
                Some(right) : op(left, right);
                None() : None();
            }
            None() : None();
        }
    }

    div = \left, right -> if(right == 0.0) {
                        None();
                    } else {
                        Some(left / right);
                    };

    switch(exp){
        Add(l, r) : apply_op(l, r, \left, right -> Some(left + right));
        Sub(l, r) : apply_op(l, r, \left, right -> Some(left - right));
        Mul(l, r) : apply_op(l, r, \left, right -> Some(left * right));
        Div(l, r) : apply_op(l, r, div);
		Pow(l, r) : apply_op(l, r, \left, right -> dpow2(left, right));

        Neg(e) : 
            switch(Val(e, variables)) {
                Some(value) : Some(-value);
                None() : None();
            }

        Int(num) : Some(num);
        Var(name): lookupTree(variables, name);
    }
}

simplify(exp : Expr) -> Expr{
    switch (exp) {
        Add(l, r): {
            left = simplify(l);
            right = simplify(r);
            
            if(left == Int(0.0) && right == Int(0.0)) { Int(0.0); } 
            else if(left  == Int(0.0)) { right; }
            else if(right == Int(0.0)) { left; } 
            else {
                switch(right){
                    Neg(v)  : Sub(left, v);
                    default : Add(left, right); 
                }
            }
        }

        Sub(l, r): {
            left = simplify(l);
            right = simplify(r);

            if(left == Int(0.0) && right == Int(0.0)) { Int(0.0); } 
            else if(left == Int(0.0))  { Neg(right); }
            else if(right == Int(0.0)) { left; }
            else {
                switch(right){
                    Neg(v)  : Add(left, v);
                    default : Sub(left, right);
                }
            }
        }

        Mul(l, r): {
            left = simplify(l);
            right = simplify(r);

            if(left == Int(1.0))       { right; }
            else if(right == Int(1.0)) { left; } 
            else if(left == Int(0.0) || right == Int(0.0)) { Int(0.0); }
            else if(right == left)     { Pow(right, Int(2.0)); } 
            else                       { Mul(left, right); }
        }

        Div(l, r): {
            left = simplify(l);
            right = simplify(r);

            if(right == Int(0.0))      { Div(left, right); } 
            else if((left == Int(0.0)) &&right != Int(0.0)) { Int(0.0); } 
            else if(right == Int(1.0)) { left; } 
            else if(right == left)     { Int(1.0); } 
            else                       { Div(left, right); }
        }

        Pow(l, r) : {
            left = simplify(l);

            if(r == Int(0.0)) { Int(1.0); } 
            else if(left == Int(0.0) && r != Int(0.0)) { Int(0.0); } 
            else              { Pow(left, r); }
        }
        
        Neg(e):{
            num = simplify(e);

            switch(num){
                Neg(ex) : ex;
                default : { 
                    if(num == Int(0.0)){ Int(0.0); } 
                    else               { Neg(num);  };
                }
            }
        }

        default: exp;
    }
}

deriv(exp : Expr, var : string) -> Expr {
    switch(exp) {
        Add(l, r) : Add(deriv(l, var), deriv(r, var));
        Sub(l, r) : Sub(deriv(l, var), deriv(r, var));
        Mul(l, r) : Add(Mul(deriv(l, var), r), Mul(deriv(r, var), l));
        Div(l, r) : Div(Sub(Mul(deriv(l, var), r), Mul(deriv(r, var), l)), Pow(r, Int(2.0)));
        Pow(l, r) : Mul(Pow(l, r), Div(Mul(r, deriv(l, var)), l));
        Neg(e)    : Neg(deriv(e, var));
        Int(value): Int(0.0);
        Var(v)    : if(v == var) {
            Int(1.0);
            } else {
                Int(0.0);
            }
    }
}

lingoGrammar() {
    compilePegGrammar("#include ast.lingo");
}

getVariables() -> Tree<string, double> {
	parameters_array = getAllUrlParametersArray();
    println(parameters_array);
	fold(parameters_array, makeTree(),\ tree, parameter-> {
			setTree(tree, parameter[0], s2d(parameter[1]))
		}
	);
}

main() {
    exp = getUrlParameterDef("expression", "(-(-2))");
	vars = getVariables();
    //println(variables);
	
    ast = parsic(lingoGrammar(), exp, defaultPegActions);

    println(ast);
	println(Str(ast));
    println(Val(ast, vars));
    println(deriv(ast, "x"));
    println(Str(deriv(ast, "x")));
    println(Val(deriv(ast, "x"), vars));

    simplified = simplify(ast);
    println("-------SIMPLIFY------");
    println(simplified);
	println(Str(simplified));
    println(Val(simplified, vars));
    println(deriv(simplified, "x"));
    println(Str(deriv(simplified, "x")));
    println(Val(deriv(simplified, "x"), vars));

    quit(0);
} 